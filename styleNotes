see TextScreen.js for implementations

- Box Object Model refers to height/width of a single element + the space around it
   - USE TO AFFECT THE POSITIONING of a SINGLE ELEMENT

- Flex Box refers to how some number of sibling elements get laid out inside a parent
    - USE TO POSITION MULTIPLE CHILD ELEMENTS w/i a COMMON PARENT
    - there are certain properties which affect how siblings are positioned in a common parent:

     - alignItems ::: affects how children are situated horizontally
        - property set on PARENT element
        - default: 'stretch' (children fill up as much HORIZONTAL space as possible)
        - 'flex-start' | 'center' | 'flex-end'
        - primary axis changes depending on flexDirection property

      - flexDirection ::: determines whether children are laid out vertically or horizontally ('column', 'row')
        - property set on PARENT element
        - default: 'column' (will fill up as much VERTICAL space as possible)
        - imp! flexDirection affects behavior of alignItems AND justifyContent --- changes primary and secondary axis
          - alignItems
            - 'column': works on horizontal axis
            - 'row': works on vertical axis
          - justifyContent
            - 'column': works on vertical axis
            - 'row': works on horizontal axis

      - justifyContent ::: affects how children are situated vertically
        - property set on PARENT element
        - default: 'flex-start' (children are pushed up to top of container)
        - 'center' | 'flex-end' | 'space-between' | 'space-around'
        - primary axis changes depending on flexDirection property

      - flex ::: makes a child in parent try take up as much space as possible (depending on the set flexDirection)
        - property set on a CHILD element
        - integer values
        - multiple children inside of one parent can have the flex property assigned
        - flex can be assigned values greater than 1
          - this will proportionately size the child components within the parent
            - 4 + 4 + 2 = 10 'sections'
            - (imagine that parent gets split into ten equal sections)
              - flexOne, flexTwo each get 40% of available space, while flexThree gets 20% of available space'

      - alignSelf ::: essentially overrides the alignItems property on the parent element
        - property set on CHILD element
        - 'auto' | 'flex-start' | 'flex-end' | 'center' | 'stretch' | 'baseline'

- Position affects how a single element is laid out inside of a parent
  - USE TO OVERRIDE BOX OBJECT MODEL and FLEX BOX
  - default: 'relative'
  - 'absolute' setting means child will be ignored by siblings but still obeys some flex box rules set by parent

- Top, Bottom, Left, Right work similar to margin except they are applied after the screen has been rendered
  - once screen renders, React goes back and applies the defined amount of space for each property on an element
  - this will make it appear as though an element is 'overlaying' another

- steps to styling each element we wish to render on the screen
  1.) apply Box Object Model rules
    - border, margin, padding
  2.) consider Position property of the element in its context
    - if 'relative' ::: follow step 3
    - if 'absolute' ::: follow step 4
  3.)
    a) apply all flex box rules, considering siblings
    b) place element inside parent
    c) apply top, left, bottom, right
  4.)
    a) apply all flex box rules, ignoring siblings
    b) apply top, left, bottom, right
